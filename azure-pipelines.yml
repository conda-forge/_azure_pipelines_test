# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

jobs:
- job: linux
  pool:
    vmImage: 'Ubuntu-16.04'
  steps:
  - script: env
    displayName: 'Print env variables'

  - script: lscpu
    displayName: 'Run lscpu'

  - script: echo Hello, world!
    displayName: 'Run a one-line script'
  
  - script: lscpu
    displayName: cpu info
    
  - script: |
      echo Add other tasks to build, test, and deploy your project.
      python3 ./test_secret.py
      env
    displayName: 'Run a multi-line script'
    env: 
      MYSECRET: $(pipeline-secret)

- job: osx
  pool:
    vmImage: 'macOS-10.13'
  steps:
  - script: sysctl -a 
    displayName: 'Run a one-line script'

- job: osx_conda_forge_internal
  pool:
    name: 'conda-forge-internal-osx'
  steps:
  - script: sysctl -a 
    displayName: 'Run a one-line script'

- job: Vs2019_Server2019
  pool:
    name: Hosted Windows 2019 with VS2019
  steps:
  - script: WMIC CPU Get /Format:List
    displayName: cpu info
    
  - script: |
      echo Add other tasks to build, test, and deploy your project.
      python ./test_secret.py
    displayName: 'Run a multi-line script'
    env: 
      MYSECRET: $(pipeline-secret)
  
  - script: |
      pip install winregistry
      python ./test_registry.py
    displayName: 'Fetch some registry keys'     

- job: windows_vs2017_win2016
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - script: WMIC CPU Get /Format:List
    displayName: cpu info

  - script: |
      echo Add other tasks to build, test, and deploy your project.
      python ./test_secret.py
    displayName: 'Run a multi-line script'
    env: 
      MYSECRET: $(pipeline-secret)
  
  - script: |
      pip install winregistry
      python ./test_registry.py
    displayName: 'Fetch some registry keys'     
    
  - script:
      dir "C:\Program Files (x86)\MSBuild\Microsoft.Cpp\v4.0\"
    displayName: Dir some things C:\Program Files (x86)
    
  - powershell: |
        using namespace System.Collections.Generic
        
        Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
        Install-Module VSSetup -Scope CurrentUser -Force

        Function InstalledPackages {
            [OutputType([HashSet[String]])]
            Param
            (
              [String] $InstallPath
            )
            
            $Packages = New-Object HashSet[String]
            $x = (Get-VSSetupInstance $InstallPath | Select-VSSetupInstance).Packages.ForEach({$Packages.Add($_.Id)})
            
            Write-Host -Object "Number of packages installed:"
            Write-Host -Object $Packages.Count\
            
            # This is how you return the true object, weird
            return ,$Packages
        }

        Function InstallVS
        {
            Param
            (
                [String]$WorkLoads,
                [String]$Sku,
                [String] $VSBootstrapperURL
            )

            Write-Host "Downloading Bootstrapper ..."
            Invoke-WebRequest -Uri $VSBootstrapperURL -OutFile "${env:Temp}\vs_$Sku.exe"

            $FilePath = "${env:Temp}\vs_$Sku.exe"
            $Arguments = ('/c', $FilePath, $WorkLoads, '--quiet', '--norestart', '--wait', '--nocache' )

            Write-Host "Starting Install ..."
            $process = Start-Process -FilePath cmd.exe -ArgumentList $Arguments -Wait -PassThru
            $exitCode = $process.ExitCode

            if ($exitCode -eq 0 -or $exitCode -eq 3010)
            {
              Write-Host -Object 'Installation successful'
              return $exitCode
            }
            else
            {
              Write-Host -Object "Non zero exit code returned by the installation process : "
              Write-Host -Object $exitCode
              return $exitCode
            }
        }

        $InstallPath = "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise"
        Write-Host "Determining installed packages ..."
        $PackagesPre = InstalledPackages -InstallPath $InstallPath
        
        $WorkLoads = "modify --installPath ""$InstallPath"" --add Microsoft.VisualCpp.PGO.X64"
        $Sku = 'Enterprise'
        $VSBootstrapperURL = 'https://aka.ms/vs/15/release/vs_enterprise.exe'

        $exitCode = InstallVS -WorkLoads $WorkLoads -Sku $Sku -VSBootstrapperURL $VSBootstrapperURL
        
        Write-Host "Determining installed packages after installation ..."
        $PackagesPost = InstalledPackages -InstallPath $InstallPath
        
        Write-Host -Object 'Additional packages installed'
        # This modified the set
        $PackagesPost.ExceptWith($PackagesPre)
        $PackagesPost | Sort-Object | Write-Host

        exit $exitCode
    displayName: Try to update vs2017 

- job: windows_vs2015_win2012r2
  pool:
    vmImage: 'vs2015-win2012r2'
  steps:
  - script: SET
    displayName: env variables

  - script: WMIC CPU Get /Format:List
    displayName: cpu info

  - script: |
      echo Add other tasks to build, test, and deploy your project.
      python ./test_secret.py
    displayName: 'Run a multi-line script'
    env: 
      MYSECRET: $(pipeline-secret)

- job: aarch64_sudo_test
  pool:
    vmImage: 'Ubuntu-16.04'
  steps:
  - script: |
      sudo pip install --upgrade pip
      sudo pip install setuptools shyaml
    displayName: Install dependencies
  # configure qemu binfmt-misc running.  This allows us to run docker containers 
  # embedded qemu-static
  - script: |
      docker run --rm --privileged multiarch/qemu-user-static:register
      ls /proc/sys/fs/binfmt_misc/
    displayName: Configure binfmt_misc
  
  - script: |
      sudo apt-get install qemu binfmt-support qemu-user-static

  - script: |
      ./run_docker_build.sh
    displayName: Run docker build
    
  
